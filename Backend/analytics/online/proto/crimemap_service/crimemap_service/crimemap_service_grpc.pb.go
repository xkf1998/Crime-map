// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: crimemap_service.proto

package crimemap_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CrimeMap_GetCrimes_FullMethodName = "/crimemap.service.CrimeMap/GetCrimes"
)

// CrimeMapClient is the client API for CrimeMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrimeMapClient interface {
	GetCrimes(ctx context.Context, in *GetCrimesRequest, opts ...grpc.CallOption) (*GetCrimesResponse, error)
}

type crimeMapClient struct {
	cc grpc.ClientConnInterface
}

func NewCrimeMapClient(cc grpc.ClientConnInterface) CrimeMapClient {
	return &crimeMapClient{cc}
}

func (c *crimeMapClient) GetCrimes(ctx context.Context, in *GetCrimesRequest, opts ...grpc.CallOption) (*GetCrimesResponse, error) {
	out := new(GetCrimesResponse)
	err := c.cc.Invoke(ctx, CrimeMap_GetCrimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrimeMapServer is the server API for CrimeMap service.
// All implementations must embed UnimplementedCrimeMapServer
// for forward compatibility
type CrimeMapServer interface {
	GetCrimes(context.Context, *GetCrimesRequest) (*GetCrimesResponse, error)
	mustEmbedUnimplementedCrimeMapServer()
}

// UnimplementedCrimeMapServer must be embedded to have forward compatible implementations.
type UnimplementedCrimeMapServer struct {
}

func (UnimplementedCrimeMapServer) GetCrimes(context.Context, *GetCrimesRequest) (*GetCrimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrimes not implemented")
}
func (UnimplementedCrimeMapServer) mustEmbedUnimplementedCrimeMapServer() {}

// UnsafeCrimeMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrimeMapServer will
// result in compilation errors.
type UnsafeCrimeMapServer interface {
	mustEmbedUnimplementedCrimeMapServer()
}

func RegisterCrimeMapServer(s grpc.ServiceRegistrar, srv CrimeMapServer) {
	s.RegisterService(&CrimeMap_ServiceDesc, srv)
}

func _CrimeMap_GetCrimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimeMapServer).GetCrimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrimeMap_GetCrimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimeMapServer).GetCrimes(ctx, req.(*GetCrimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrimeMap_ServiceDesc is the grpc.ServiceDesc for CrimeMap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrimeMap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crimemap.service.CrimeMap",
	HandlerType: (*CrimeMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrimes",
			Handler:    _CrimeMap_GetCrimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crimemap_service.proto",
}
